#!/usr/bin/php -q
<?php

/**
 * Generate a raw database class for each table. Instead of doing it on the fly each time, I run
 * this after any database changes and store it in lib/class.DB.php.  Then, for each of the classes,
 * I'll make an exetended class based on the DB_{object} class.
 * I know, I'll get hate for not doing this on-the-fly/dynamically, but I've done it many different
 * ways, many times, and I always tend to come back to this method. It's more stable, predictable, 
 * efficient, and is nearly always fastest.
 * This outputs text directly to stdout.
 *
 * NOTE!!! If you use non-standard field names in your database, this won't like it. Don't use spaces,
 * ticks, utf-8 odd chars in your table/field names, or you're gonna have a bad time. Why do that to yourself?
 *
 * Also note, there is no DELETE. I tend to HATE to delete things from a DB (there's always analytics to get).
 * Instead I use an "Active" field - if it's 0, then it's "deleted".
 *
 * This is run from the command line, so set_include_path may need to be updated.
 *
 * Run with:   ./gen_db_classes.php > ../lib/class.db_classes.php
 *
 * @author Steve Cook <booyahmedia@gmail.com>
 * @copyright 1998 - 2017 Stephen Cook
 * @license http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link http://booyahmedia.com/
 * @version Release: @package_version@
 * @todo Add more features to take advantage of PDO.
 *
 **/

set_include_path(".:../lib");

require_once("globals.php");
require_once("class.db_master.php");

CreateDBClass(DB_NAME);


/**
 * Starting function to start the output and echo required includes. Then calls function to build each object.
 * @param string $db_name The name of the database.
 **/
function CreateDBClass($db_name) {

$link=db::factory();

$tables = $link->getArray("SHOW TABLES FROM ".$db_name,array(),false);

$tabs = array();
foreach($tables as $k=>$v){
    $fields = $link->getArray("SHOW COLUMNS FROM $v[0]");
    $tmp=array();
    foreach($fields as $l=>$f) { 
       $tmp[$f['Field']]=$f['Type']; 
    }
    $tabs[$v[0]]=$tmp;
}


print("<"."?"."php\n");
print("\n/*\n ****************************************************************\n");
print(" * *****   DO NOT EDIT THIS FILE!!!! ******************************\n");
print(" * ***  This file is generated automatically to create a DATABASE class ONLY.\n");
print(" * *** Generated on: ".date("r")."\n");
print(" *****************************************************************\n");
print(" */\n");
print("\nrequire_once('globals.php');"); 
print("\nrequire_once('class.db_master.php');\n"); 

foreach($tables as $k=>$v) {
    $t=$v[0];
    print("\n\nclass DB_$t extends DBTable {\n");

    $fields = $link->getArray("SHOW COLUMNS FROM $t");

    // Print the public vars.
    foreach($fields as $k=>$f) { print("\tpublic \$$f[Field];\n"); }

    print("\tpublic \$tableName \t= '$t';\n");
    print("\tpublic \$objectId  \t= '$t"."ID';\n");

    print("\tpublic \$subObjects \t= array(");

    $COMMA="";
    foreach($tabs as $tab=>$fld) {
        if($tab!=$t) {
            if(isset($fld[$t."ID"])) { 
                print($COMMA.'"'.$tab.'"');    
                $COMMA=",";
            }
        }
    }

    print(");\n");


    $COMMA='';
    $dbf="\tpublic \$dbFields \t= array(";
    foreach($fields as $k=>$f) {
        $dbf.=$COMMA."'$f[Field]'=>";
        $typ = explode("(",$f['Type']);
        $val="''";
        switch($typ[0]) {
        case "int":
        case "smallint":
        case "tinyint":
        case "bigint":
        case "medint":
        case "bit":
        case "boolean":
            $val="0";
            break;
        case "real":
        case "float":
        case "decimal":
        case "real":
            $val="0.00";
            break;
        case "string":
        case "varchar":
        case "char":
        case "blob":
        default:
            $val="''";
            break;
        /* default:
            print("UNKNOWN******* .".print_r($f,true).";\n");
            exit();
            break;
         */
        }
        $dbf.=$val;
        $COMMA=',';
    }
    $dbf.=");\n";
    print($dbf);

    print("}\n");

//    print_r($fields);
}
