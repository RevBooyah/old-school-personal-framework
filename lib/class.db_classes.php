<?php

/*
 ****************************************************************
 * *****   DO NOT EDIT THIS FILE!!!! ******************************
 * ***  This file is generated automatically to create a DATABASE class ONLY.
 * *** Generated on: Thu, 18 Jul 2013 17:38:57 -0400
 *****************************************************************
 */

require_once('globals.php');
require_once('class.db.php');


class DB_User {
	public $UserID;  	// bigint(20) unsigned
	public $Name;  	// varchar(80)
	public $Email;  	// varchar(255)
	public $Password;  	// varchar(255)
	public $Company;  	// varchar(255)
	public $UserType;  	// tinyint(3) unsigned
	public $OfficePhone;  	// varchar(18)
	public $CellPhone;  	// varchar(16)
	public $Skype;  	// varchar(40)
	public $FacebookId;  	// varchar(40)
	public $FacebookToken;  	// varchar(255)
	public $StartStamp;  	// bigint(20) unsigned
	public $LastStamp;  	// bigint(20) unsigned
	public $SignupIP;  	// varchar(25)
	public $ConfCode;  	// varchar(12)
	public $ConfStamp;  	// bigint(20) unsigned
	public $AccountLevel;  	// tinyint(4)
	public $ContactPrefs;  	// bigint(20) unsigned
	public $Active;  	// tinyint(3) unsigned

	public function __construct($id=0) {
		$db=db::factory();
		if($id>0){
			$q="select * from test.User where UserID='$id' LIMIT 1";
			$row=$db->getRow($q);
			if(count($row)<1) return(0);
			foreach($row as $k=>$v) $this->{$k}=$v;
			return(1);
		} else {
			$this->UserID=0;
			$this->Name='';
			$this->Email='';
			$this->Password='';
			$this->Company='';
			$this->UserType=0;
			$this->OfficePhone='';
			$this->CellPhone='';
			$this->Skype='';
			$this->FacebookId='';
			$this->FacebookToken='';
			$this->StartStamp=0;
			$this->LastStamp=0;
			$this->SignupIP='';
			$this->ConfCode='';
			$this->ConfStamp=0;
			$this->AccountLevel=0;
			$this->ContactPrefs=0;
			$this->Active=0;
		}
	}

	public function load($id=0) {
		$db=db::factory();
		$q="SELECT * FROM test.User WHERE UserID='$id' LIMIT 1";
		$row=$db->getRow($q);
		if(count($row)<1) return(0);
		foreach($row as $k=>$v) $this->{$k}=$v;
		return(true);
	}

        public function save($id=0) {
	$db=db::factory();
	if($id==0) {
	        $q="INSERT INTO test.User (UserID,Name,Email,Password,Company,UserType,OfficePhone,CellPhone,Skype,FacebookId,FacebookToken,StartStamp,LastStamp,SignupIP,ConfCode,ConfStamp,AccountLevel,ContactPrefs,Active) VALUES ($this->UserID,'$this->Name','$this->Email','$this->Password','$this->Company','$this->UserType','$this->OfficePhone','$this->CellPhone','$this->Skype','$this->FacebookId','$this->FacebookToken','$this->StartStamp','$this->LastStamp','$this->SignupIP','$this->ConfCode','$this->ConfStamp','$this->AccountLevel','$this->ContactPrefs','$this->Active')";
	        $save_type="New Save";
	} else {
	        $q="UPDATE test.User SET UserID='$this->UserID',Name='$this->Name',Email='$this->Email',Password='$this->Password',Company='$this->Company',UserType='$this->UserType',OfficePhone='$this->OfficePhone',CellPhone='$this->CellPhone',Skype='$this->Skype',FacebookId='$this->FacebookId',FacebookToken='$this->FacebookToken',StartStamp='$this->StartStamp',LastStamp='$this->LastStamp',SignupIP='$this->SignupIP',ConfCode='$this->ConfCode',ConfStamp='$this->ConfStamp',AccountLevel='$this->AccountLevel',ContactPrefs='$this->ContactPrefs',Active='$this->Active' WHERE UserID=$id LIMIT 1";
	        $save_type="Update";
	}
	if($id==0) {
	        $result=$db->execute($q);
		$id=($result==true)?$db->getLastId():0;
	} else {
	        $result=$db->execute($q);
	}
	if(!$result) {
	        //print("$save_type FAILED.");
	        return(0);
	}
	return($id);
        }
	
        public function updateFields($aUpdates) {
	$db=db::factory();
	$COMMA="";
	$q="UPDATE test.User SET ";
	foreach($aUpdates as $k=>$v) {
	        $q.="$COMMA$k='$v'";
	        $COMMA=",";
	        $this->$k=$v;
	}
	$q.=" WHERE UserID=$this->UserID LIMIT 1";

	$result=$db->execute($q);
	if(!$result) {
	        //print("$save_type FAILED.");
	        return(false);
	} else {
	        return(true);
	}
        }


} #End of class User


